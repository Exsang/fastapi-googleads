[1mdiff --git a/.devcontainer/postCreate.sh b/.devcontainer/postCreate.sh[m
[1mindex fd82dac..dcd5fcb 100755[m
[1m--- a/.devcontainer/postCreate.sh[m
[1m+++ b/.devcontainer/postCreate.sh[m
[36m@@ -1,30 +1,80 @@[m
 #!/usr/bin/env bash[m
[31m-set -e[m
[32m+[m[32mset -euo pipefail[m
 [m
 WS="/workspaces/fastapi-googleads"[m
 [m
[32m+[m[32mecho "=== [postCreate] Creating venv ==="[m
 mkdir -p "$WS/secrets/google_ads"[m
[31m-if [ ! -d "$WS/.venv" ]; then[m
[32m+[m[32mif [[ ! -d "$WS/.venv" ]]; then[m
   python -m venv "$WS/.venv"[m
 fi[m
[32m+[m[32m# shellcheck disable=SC1091[m
 source "$WS/.venv/bin/activate"[m
 [m
[32m+[m[32mecho "=== [postCreate] Upgrading pip tooling ==="[m
 python -m pip install --upgrade pip wheel setuptools || true[m
 [m
[31m-if [ -f "$WS/requirements.txt" ]; then[m
[32m+[m[32mecho "=== [postCreate] Installing project dependencies ==="[m
[32m+[m[32mif [[ -f "$WS/requirements.txt" ]]; then[m
   pip install -r "$WS/requirements.txt"[m
 else[m
[31m-  pip install fastapi uvicorn[standard] python-dotenv pydantic pydantic-settings google-ads sqlalchemy[m
[32m+[m[32m  # Baseline deps if no requirements.txt yet (includes gRPC + protobuf)[m
[32m+[m[32m  pip install \[m
[32m+[m[32m    fastapi uvicorn[standard] python-dotenv pydantic pydantic-settings \[m
[32m+[m[32m    google-ads grpcio grpcio-status protobuf sqlalchemy[m
[32m+[m
[32m+[m[32m  # Freeze the environment so future rebuilds are reproducible[m
[32m+[m[32m  pip freeze > "$WS/requirements.txt"[m
 fi[m
 [m
[31m-# Minimal .env if missing[m
[31m-if [ ! -f "$WS/.env" ]; then[m
[32m+[m[32mecho "=== [postCreate] Ensuring .env exists (non-destructive) ==="[m
[32m+[m[32mif [[ ! -f "$WS/.env" ]]; then[m
   cat > "$WS/.env" <<EOF[m
 HOST=0.0.0.0[m
 PORT=8000[m
 DEFAULT_SECRETS_DIR=$WS/secrets/google_ads[m
 DEFAULT_MCC_ID=7414394764[m
 EOF[m
[32m+[m[32m  echo "[postCreate] Created minimal .env"[m
 fi[m
 [m
[31m-echo "postCreate complete."[m
[32m+[m[32m# Provide a template with Google Ads keys if not present[m
[32m+[m[32mif [[ ! -f "$WS/.env.template" ]]; then[m
[32m+[m[32m  cat > "$WS/.env.template" <<'ENV'[m
[32m+[m[32m# Copy to .env and fill in values.[m
[32m+[m[32m# App basics[m
[32m+[m[32mHOST=0.0.0.0[m
[32m+[m[32mPORT=8000[m
[32m+[m[32mDEFAULT_SECRETS_DIR=/workspaces/fastapi-googleads/secrets/google_ads[m
[32m+[m[32mDEFAULT_MCC_ID=7414394764[m
[32m+[m
[32m+[m[32m# Google Ads API (required)[m
[32m+[m[32mGOOGLE_ADS_DEVELOPER_TOKEN=[m
[32m+[m[32mGOOGLE_ADS_CLIENT_ID=[m
[32m+[m[32mGOOGLE_ADS_CLIENT_SECRET=[m
[32m+[m[32mGOOGLE_ADS_REFRESH_TOKEN=[m
[32m+[m[32mLOGIN_CUSTOMER_ID=7414394764[m
[32m+[m
[32m+[m[32m# App auth[m
[32m+[m[32mDASH_API_KEY=[m
[32m+[m[32mENV[m
[32m+[m[32m  echo "[postCreate] Wrote .env.template"[m
[32m+[m[32mfi[m
[32m+[m
[32m+[m[32mecho "=== [postCreate] Running Google Ads smoke test ==="[m
[32m+[m[32mpython - <<'PY'[m
[32m+[m[32mimport os, sys[m
[32m+[m[32mfrom google.ads.googleads.client import GoogleAdsClient[m
[32m+[m[32mtry:[m
[32m+[m[32m    # Load from env (.env should be picked up by your app via python-dotenv at runtime;[m
[32m+[m[32m    # for this smoke test we rely on real env vars if already set in the Codespace)[m
[32m+[m[32m    client = GoogleAdsClient.load_from_env()[m
[32m+[m[32m    svc = client.get_service("CustomerService")[m
[32m+[m[32m    rns = list(svc.list_accessible_customers().resource_names)[m
[32m+[m[32m    print("[SMOKE] CustomerService OK:", rns if rns else "No accounts visible (but call succeeded).")[m
[32m+[m[32mexcept Exception as e:[m
[32m+[m[32m    print("[SMOKE][WARN] Google Ads check did not succeed:", e)[m
[32m+[m[32m    # Non-fatal: keep container usable even if creds aren't set yet[m
[32m+[m[32mPY[m
[32m+[m
[32m+[m[32mecho "=== [postCreate] Finished. ==="[m
